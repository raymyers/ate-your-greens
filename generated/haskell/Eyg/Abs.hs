-- File generated by the BNF Converter (bnfc 2.9.6).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Eyg.

module Eyg.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = PExps Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ELet MatchPattern Exp Exp
    | EList [ListItem]
    | ERecord [RecordField]
    | ETagged Tag Exp
    | ELambda [Param] Exp
    | EPerform Exp
    | EHandle Tag Exp Exp
    | EMatch Exp [MatchItem]
    | EApply Exp [Exp]
    | ESelect Exp Id
    | EVar Id
    | EInt Integer
    | ENegInt Integer
    | EString String
    | ENamedReference NamedReference
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchItem = MatchItem0 MatchPattern Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchPattern
    = MPTagged Tag MatchPattern | MPRecord [RecordField] | MPId Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecordField = RFKeyVal Id Exp | RFSpread Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Param = PId Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ListItem = LIExpr Exp | LISpread Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype NamedReference = NamedReference String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Tag = Tag String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

