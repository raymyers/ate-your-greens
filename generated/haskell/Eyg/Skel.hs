-- File generated by the BNF Converter (bnfc 2.9.6).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Eyg.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Eyg.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transNamedReference :: Eyg.Abs.NamedReference -> Result
transNamedReference x = case x of
  Eyg.Abs.NamedReference string -> failure x

transTag :: Eyg.Abs.Tag -> Result
transTag x = case x of
  Eyg.Abs.Tag string -> failure x

transId :: Eyg.Abs.Id -> Result
transId x = case x of
  Eyg.Abs.Id string -> failure x

transProgram :: Eyg.Abs.Program -> Result
transProgram x = case x of
  Eyg.Abs.PExps exp -> failure x

transExp :: Eyg.Abs.Exp -> Result
transExp x = case x of
  Eyg.Abs.ELet matchpattern exp1 exp2 -> failure x
  Eyg.Abs.EList listitems -> failure x
  Eyg.Abs.ERecord recordfields -> failure x
  Eyg.Abs.ETagged tag exp -> failure x
  Eyg.Abs.ELambda params exp -> failure x
  Eyg.Abs.EPerform exp -> failure x
  Eyg.Abs.EHandle tag exp1 exp2 -> failure x
  Eyg.Abs.EMatch exp matchitems -> failure x
  Eyg.Abs.EApply exp exps -> failure x
  Eyg.Abs.ESelect exp id -> failure x
  Eyg.Abs.EVar id -> failure x
  Eyg.Abs.EInt integer -> failure x
  Eyg.Abs.ENegInt integer -> failure x
  Eyg.Abs.EString string -> failure x
  Eyg.Abs.ENamedReference namedreference -> failure x

transMatchItem :: Eyg.Abs.MatchItem -> Result
transMatchItem x = case x of
  Eyg.Abs.MatchItem0 matchpattern exp -> failure x

transMatchPattern :: Eyg.Abs.MatchPattern -> Result
transMatchPattern x = case x of
  Eyg.Abs.MPTagged tag matchpattern -> failure x
  Eyg.Abs.MPRecord recordfields -> failure x
  Eyg.Abs.MPId id -> failure x

transRecordField :: Eyg.Abs.RecordField -> Result
transRecordField x = case x of
  Eyg.Abs.RFKeyVal id exp -> failure x
  Eyg.Abs.RFSpread exp -> failure x

transParam :: Eyg.Abs.Param -> Result
transParam x = case x of
  Eyg.Abs.PId id -> failure x

transListItem :: Eyg.Abs.ListItem -> Result
transListItem x = case x of
  Eyg.Abs.LIExpr exp -> failure x
  Eyg.Abs.LISpread exp -> failure x
