ex_numbers = || {
    x = 5
    y = 7
    !int_add(x, y)
}
# => 12

ex_text = || {
    greeting = "Hello "
    name = "world"
    !string_append(greeting, name)
}
# => "Hello World!"

ex_lists = || {
    items = [1, 2]
    items = [10, ..items]
    total = !list_fold(items, 0, !int_add)
    total
}
# => 13

ex_records = || {
    alice = {name: "Alice"}
    bob = {name: "Bob", height: 192}
    alice.name
}
# => Alice

ex_record_spread = || {
    bob = {name: "Bob", height: 192}
    {height: 100, ..bob}
}
# => {height: 100, name: "Bob"}

ex_match = || {
    match !int_parse("not a number") {
        Ok(value) -> value
        Error(_) -> -1
    }
}
# => -1

ex_match_no_paren = || {
    match !int_parse("not a number") {
        Ok value -> value
        Error _ -> -1
    }
}
# => -1

ex_match_union = || {
    match Cat("felix") {
        Cat(name) -> name
        (_) -> "wild"
    }
}
# => Felix

ex_match_union_no_paren = || {
    match Cat "felix" {
        Cat name -> name
        _ -> "wild"
    }
}
# => Felix

match_on_let = || {
    {food: f} = {food: "Greens", action: "eat"}
    f
}
# => "Greens

ex_functions = || {
    inc = !int_add(1)
    twice = |f, x| {
        f(f(x))
    }
    inc2 = twice(inc)
    inc2(5)
}
# => 7

ex_higher_order_functions = || {
    inc = !int_add(1)
    count = !fix(|count, total, rest| {
        match !list_pop(rest) {
            # block { } not allowed here, so using paren.
            # But maybe that should change?
            Ok ({tail: rest}) -> (
                total = inc(total)
                count(total, rest)
            )
            Error (_) -> total
        }
    })
    count = count(0)
    count([5])
}
# => 1

ex_builtin = || {
    total = !int_multiply(90, 3)
    total = !into_to_string(total)
    notice = !string_append("The total is: ", total)
    notice
}
# => "The total is: 270"

ex_named_references = || {
    std = @std:1
    std.list.contains([1], 0)
}
# => False({})

ex_perform = || {
    question = "Hello, what is your name?"
    match perform Prompt(question) {
        Ok name -> perform Alert(!string_append("hello,", name))
        Error _ -> perform Alert("I didn't catch your name.")
    }
}

ex_handle = || {
    capture = |exec| {
        handle Alert(
            |value, resume| {
                {return: return, alerts: alerts} = resume({})
                {return: return, alerts: [value, ..alerts]}
            },
            |_| { {alerts: [], return: exec({})} }
            # Not currently supporting optional trailing comma.
        )
    }
    run = |_| {
        _ = perform Alert("first")
        _ = perform Alert("second")
        {}
    }
    {}
}
# => {alerts: ["first", "second"], return: {}}

ex_multiple_resumptions = || {
    std = @std:1
    capture = |exec| {
            handle Flip(
            |value, resume| {
                truthy = resume(True({}))
                falsy = resume(False({}))
                std.list.flatten([truthy, falsy])
            },
            |_| { [exec({})] }
        )
    }
    run = |_| {
        first = perform Flip({})
        second = perform Flip({})
        {second: second, first: first}
    }
    capture(run)
}

ex_closure_serialization = || {
    greeting = "hey"
    ignored = "this string doesn't get transpiled"
    func = !to_javascript(|_| { !string_append(greeting, "Alice") }, {})
    func
}

{}