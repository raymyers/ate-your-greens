// File generated by the BNF Converter (bnfc 2.9.6).

package eyg;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(eyg.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.Exp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.Exp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.ListListItem foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.ListListItem foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.ListRecordField foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.ListRecordField foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.ListMatchItem foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.ListMatchItem foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.ListExp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.ListExp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.ListParam foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.ListParam foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.MatchItem foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.MatchItem foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.MatchPattern foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.MatchPattern foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.RecordField foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.RecordField foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.Param foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.Param foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(eyg.Absyn.ListItem foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(eyg.Absyn.ListItem foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(eyg.Absyn.Program foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.PExps)
    {
       eyg.Absyn.PExps _pexps = (eyg.Absyn.PExps) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_pexps.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(eyg.Absyn.Exp foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.ELet)
    {
       eyg.Absyn.ELet _elet = (eyg.Absyn.ELet) foo;
       if (_i_ > 1) render(_L_PAREN);
       render("let");
       pp(_elet.matchpattern_, 0);
       render("=");
       pp(_elet.exp_1, 2);
       render(";");
       pp(_elet.exp_2, 0);
       if (_i_ > 1) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EList)
    {
       eyg.Absyn.EList _elist = (eyg.Absyn.EList) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("[");
       pp(_elist.listlistitem_, 0);
       render("]");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.ERecord)
    {
       eyg.Absyn.ERecord _erecord = (eyg.Absyn.ERecord) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("{");
       pp(_erecord.listrecordfield_, 0);
       render("}");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.ETagged)
    {
       eyg.Absyn.ETagged _etagged = (eyg.Absyn.ETagged) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_etagged.tag_, 0);
       pp(_etagged.exp_, 0);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.ELambda)
    {
       eyg.Absyn.ELambda _elambda = (eyg.Absyn.ELambda) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("|");
       pp(_elambda.listparam_, 0);
       render("|");
       render("{");
       pp(_elambda.exp_, 0);
       render("}");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EPerform)
    {
       eyg.Absyn.EPerform _eperform = (eyg.Absyn.EPerform) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("perform");
       pp(_eperform.exp_, 2);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EHandle)
    {
       eyg.Absyn.EHandle _ehandle = (eyg.Absyn.EHandle) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("handle");
       pp(_ehandle.tag_, 0);
       render("(");
       pp(_ehandle.exp_1, 2);
       render(",");
       pp(_ehandle.exp_2, 2);
       render(")");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EMatch)
    {
       eyg.Absyn.EMatch _ematch = (eyg.Absyn.EMatch) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("match");
       pp(_ematch.exp_, 2);
       render("{");
       render("case");
       pp(_ematch.listmatchitem_, 0);
       render("}");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EApply)
    {
       eyg.Absyn.EApply _eapply = (eyg.Absyn.EApply) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_eapply.exp_, 3);
       render("(");
       pp(_eapply.listexp_, 2);
       render(")");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.ESelect)
    {
       eyg.Absyn.ESelect _eselect = (eyg.Absyn.ESelect) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_eselect.exp_, 3);
       render(".");
       pp(_eselect.id_, 0);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EVar)
    {
       eyg.Absyn.EVar _evar = (eyg.Absyn.EVar) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_evar.id_, 0);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EInt)
    {
       eyg.Absyn.EInt _eint = (eyg.Absyn.EInt) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_eint.integer_, 0);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.ENegInt)
    {
       eyg.Absyn.ENegInt _enegint = (eyg.Absyn.ENegInt) foo;
       if (_i_ > 4) render(_L_PAREN);
       render("-");
       pp(_enegint.integer_, 0);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.EString)
    {
       eyg.Absyn.EString _estring = (eyg.Absyn.EString) foo;
       if (_i_ > 4) render(_L_PAREN);
       printQuoted(_estring.string_);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.ENamedReference)
    {
       eyg.Absyn.ENamedReference _enamedreference = (eyg.Absyn.ENamedReference) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_enamedreference.namedreference_, 0);
       if (_i_ > 4) render(_R_PAREN);
    }

  }

  private static void pp(eyg.Absyn.ListListItem foo, int _i_)
  {
    ppListListItem(foo.iterator(), _i_);
  }

  private static void ppListListItem(java.util.Iterator<eyg.Absyn.ListItem> it, int _i_)
  {
    if (it.hasNext())
    {
      eyg.Absyn.ListItem el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListListItem(it, _i_);
      }
    }
  }


  private static void pp(eyg.Absyn.ListRecordField foo, int _i_)
  {
    ppListRecordField(foo.iterator(), _i_);
  }

  private static void ppListRecordField(java.util.Iterator<eyg.Absyn.RecordField> it, int _i_)
  {
    if (it.hasNext())
    {
      eyg.Absyn.RecordField el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListRecordField(it, _i_);
      }
    }
  }


  private static void pp(eyg.Absyn.ListMatchItem foo, int _i_)
  {
    ppListMatchItem(foo.iterator(), _i_);
  }

  private static void ppListMatchItem(java.util.Iterator<eyg.Absyn.MatchItem> it, int _i_)
  {
    if (it.hasNext())
    {
      eyg.Absyn.MatchItem el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render("case"); ppListMatchItem(it, _i_);
      }
    }
  }


  private static void pp(eyg.Absyn.ListExp foo, int _i_)
  {
    ppListExp(foo.iterator(), _i_);
  }

  private static void ppListExp(java.util.Iterator<eyg.Absyn.Exp> it, int _i_)
  {
    if (it.hasNext())
    {
      eyg.Absyn.Exp el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListExp(it, _i_);
      }
    }
  }


  private static void pp(eyg.Absyn.ListParam foo, int _i_)
  {
    ppListParam(foo.iterator(), _i_);
  }

  private static void ppListParam(java.util.Iterator<eyg.Absyn.Param> it, int _i_)
  {
    if (it.hasNext())
    {
      eyg.Absyn.Param el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListParam(it, _i_);
      }
    }
  }


  private static void pp(eyg.Absyn.MatchItem foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.MatchItem0)
    {
       eyg.Absyn.MatchItem0 _matchitem0 = (eyg.Absyn.MatchItem0) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_matchitem0.matchpattern_, 0);
       render("->");
       pp(_matchitem0.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(eyg.Absyn.MatchPattern foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.MPTagged)
    {
       eyg.Absyn.MPTagged _mptagged = (eyg.Absyn.MPTagged) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_mptagged.tag_, 0);
       pp(_mptagged.matchpattern_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.MPRecord)
    {
       eyg.Absyn.MPRecord _mprecord = (eyg.Absyn.MPRecord) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       pp(_mprecord.listrecordfield_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.MPId)
    {
       eyg.Absyn.MPId _mpid = (eyg.Absyn.MPId) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_mpid.id_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(eyg.Absyn.RecordField foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.RFKeyVal)
    {
       eyg.Absyn.RFKeyVal _rfkeyval = (eyg.Absyn.RFKeyVal) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_rfkeyval.id_, 0);
       render(":");
       pp(_rfkeyval.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.RFSpread)
    {
       eyg.Absyn.RFSpread _rfspread = (eyg.Absyn.RFSpread) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("..");
       pp(_rfspread.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(eyg.Absyn.Param foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.PId)
    {
       eyg.Absyn.PId _pid = (eyg.Absyn.PId) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_pid.id_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(eyg.Absyn.ListItem foo, int _i_)
  {
    if (foo instanceof eyg.Absyn.LIExpr)
    {
       eyg.Absyn.LIExpr _liexpr = (eyg.Absyn.LIExpr) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_liexpr.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof eyg.Absyn.LISpread)
    {
       eyg.Absyn.LISpread _lispread = (eyg.Absyn.LISpread) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("..");
       pp(_lispread.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }


  private static void sh(eyg.Absyn.Program foo)
  {
    if (foo instanceof eyg.Absyn.PExps)
    {
       eyg.Absyn.PExps _pexps = (eyg.Absyn.PExps) foo;
       render("(");
       render("PExps");
       sh(_pexps.exp_);
       render(")");
    }
  }

  private static void sh(eyg.Absyn.Exp foo)
  {
    if (foo instanceof eyg.Absyn.ELet)
    {
       eyg.Absyn.ELet _elet = (eyg.Absyn.ELet) foo;
       render("(");
       render("ELet");
       sh(_elet.matchpattern_);
       sh(_elet.exp_1);
       sh(_elet.exp_2);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EList)
    {
       eyg.Absyn.EList _elist = (eyg.Absyn.EList) foo;
       render("(");
       render("EList");
       render("[");
       sh(_elist.listlistitem_);
       render("]");
       render(")");
    }
    if (foo instanceof eyg.Absyn.ERecord)
    {
       eyg.Absyn.ERecord _erecord = (eyg.Absyn.ERecord) foo;
       render("(");
       render("ERecord");
       render("[");
       sh(_erecord.listrecordfield_);
       render("]");
       render(")");
    }
    if (foo instanceof eyg.Absyn.ETagged)
    {
       eyg.Absyn.ETagged _etagged = (eyg.Absyn.ETagged) foo;
       render("(");
       render("ETagged");
       sh(_etagged.tag_);
       sh(_etagged.exp_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.ELambda)
    {
       eyg.Absyn.ELambda _elambda = (eyg.Absyn.ELambda) foo;
       render("(");
       render("ELambda");
       render("[");
       sh(_elambda.listparam_);
       render("]");
       sh(_elambda.exp_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EPerform)
    {
       eyg.Absyn.EPerform _eperform = (eyg.Absyn.EPerform) foo;
       render("(");
       render("EPerform");
       sh(_eperform.exp_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EHandle)
    {
       eyg.Absyn.EHandle _ehandle = (eyg.Absyn.EHandle) foo;
       render("(");
       render("EHandle");
       sh(_ehandle.tag_);
       sh(_ehandle.exp_1);
       sh(_ehandle.exp_2);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EMatch)
    {
       eyg.Absyn.EMatch _ematch = (eyg.Absyn.EMatch) foo;
       render("(");
       render("EMatch");
       sh(_ematch.exp_);
       render("[");
       sh(_ematch.listmatchitem_);
       render("]");
       render(")");
    }
    if (foo instanceof eyg.Absyn.EApply)
    {
       eyg.Absyn.EApply _eapply = (eyg.Absyn.EApply) foo;
       render("(");
       render("EApply");
       sh(_eapply.exp_);
       render("[");
       sh(_eapply.listexp_);
       render("]");
       render(")");
    }
    if (foo instanceof eyg.Absyn.ESelect)
    {
       eyg.Absyn.ESelect _eselect = (eyg.Absyn.ESelect) foo;
       render("(");
       render("ESelect");
       sh(_eselect.exp_);
       sh(_eselect.id_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EVar)
    {
       eyg.Absyn.EVar _evar = (eyg.Absyn.EVar) foo;
       render("(");
       render("EVar");
       sh(_evar.id_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EInt)
    {
       eyg.Absyn.EInt _eint = (eyg.Absyn.EInt) foo;
       render("(");
       render("EInt");
       sh(_eint.integer_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.ENegInt)
    {
       eyg.Absyn.ENegInt _enegint = (eyg.Absyn.ENegInt) foo;
       render("(");
       render("ENegInt");
       sh(_enegint.integer_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.EString)
    {
       eyg.Absyn.EString _estring = (eyg.Absyn.EString) foo;
       render("(");
       render("EString");
       sh(_estring.string_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.ENamedReference)
    {
       eyg.Absyn.ENamedReference _enamedreference = (eyg.Absyn.ENamedReference) foo;
       render("(");
       render("ENamedReference");
       sh(_enamedreference.namedreference_);
       render(")");
    }
  }

  private static void sh(eyg.Absyn.ListListItem foo)
  {
     for (java.util.Iterator<eyg.Absyn.ListItem> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(eyg.Absyn.ListRecordField foo)
  {
     for (java.util.Iterator<eyg.Absyn.RecordField> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(eyg.Absyn.ListMatchItem foo)
  {
     for (java.util.Iterator<eyg.Absyn.MatchItem> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(eyg.Absyn.ListExp foo)
  {
     for (java.util.Iterator<eyg.Absyn.Exp> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(eyg.Absyn.ListParam foo)
  {
     for (java.util.Iterator<eyg.Absyn.Param> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(eyg.Absyn.MatchItem foo)
  {
    if (foo instanceof eyg.Absyn.MatchItem0)
    {
       eyg.Absyn.MatchItem0 _matchitem0 = (eyg.Absyn.MatchItem0) foo;
       render("(");
       render("MatchItem0");
       sh(_matchitem0.matchpattern_);
       sh(_matchitem0.exp_);
       render(")");
    }
  }

  private static void sh(eyg.Absyn.MatchPattern foo)
  {
    if (foo instanceof eyg.Absyn.MPTagged)
    {
       eyg.Absyn.MPTagged _mptagged = (eyg.Absyn.MPTagged) foo;
       render("(");
       render("MPTagged");
       sh(_mptagged.tag_);
       sh(_mptagged.matchpattern_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.MPRecord)
    {
       eyg.Absyn.MPRecord _mprecord = (eyg.Absyn.MPRecord) foo;
       render("(");
       render("MPRecord");
       render("[");
       sh(_mprecord.listrecordfield_);
       render("]");
       render(")");
    }
    if (foo instanceof eyg.Absyn.MPId)
    {
       eyg.Absyn.MPId _mpid = (eyg.Absyn.MPId) foo;
       render("(");
       render("MPId");
       sh(_mpid.id_);
       render(")");
    }
  }

  private static void sh(eyg.Absyn.RecordField foo)
  {
    if (foo instanceof eyg.Absyn.RFKeyVal)
    {
       eyg.Absyn.RFKeyVal _rfkeyval = (eyg.Absyn.RFKeyVal) foo;
       render("(");
       render("RFKeyVal");
       sh(_rfkeyval.id_);
       sh(_rfkeyval.exp_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.RFSpread)
    {
       eyg.Absyn.RFSpread _rfspread = (eyg.Absyn.RFSpread) foo;
       render("(");
       render("RFSpread");
       sh(_rfspread.exp_);
       render(")");
    }
  }

  private static void sh(eyg.Absyn.Param foo)
  {
    if (foo instanceof eyg.Absyn.PId)
    {
       eyg.Absyn.PId _pid = (eyg.Absyn.PId) foo;
       render("(");
       render("PId");
       sh(_pid.id_);
       render(")");
    }
  }

  private static void sh(eyg.Absyn.ListItem foo)
  {
    if (foo instanceof eyg.Absyn.LIExpr)
    {
       eyg.Absyn.LIExpr _liexpr = (eyg.Absyn.LIExpr) foo;
       render("(");
       render("LIExpr");
       sh(_liexpr.exp_);
       render(")");
    }
    if (foo instanceof eyg.Absyn.LISpread)
    {
       eyg.Absyn.LISpread _lispread = (eyg.Absyn.LISpread) foo;
       render("(");
       render("LISpread");
       sh(_lispread.exp_);
       render(")");
    }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + escape(c.toString()) + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + escape(c.toString()) + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + escape(s) + "\""); }

  public static String escape(String s) {
    if (s == null) return null;
    return s.replace("\\", "\\\\")
            .replace("\t", "\\t")
            .replace("\b", "\\b")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\f", "\\f")
            .replace("\"", "\\\"");
  }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

