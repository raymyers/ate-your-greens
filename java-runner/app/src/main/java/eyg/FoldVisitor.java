// File generated by the BNF Converter (bnfc 2.9.6).

package eyg;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Program */
    public R visit(eyg.Absyn.PExps p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }

/* Exp */
    public R visit(eyg.Absyn.ELet p, A arg) {
      R r = leaf(arg);
      r = combine(p.matchpattern_.accept(this, arg), r, arg);
      r = combine(p.exp_1.accept(this, arg), r, arg);
      r = combine(p.exp_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.EList p, A arg) {
      R r = leaf(arg);
      for (eyg.Absyn.ListItem x : p.listlistitem_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(eyg.Absyn.ERecord p, A arg) {
      R r = leaf(arg);
      for (eyg.Absyn.RecordField x : p.listrecordfield_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(eyg.Absyn.ETagged p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.ELambda p, A arg) {
      R r = leaf(arg);
      for (eyg.Absyn.Param x : p.listparam_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.EPerform p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.EHandle p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_1.accept(this, arg), r, arg);
      r = combine(p.exp_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.EMatch p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      for (eyg.Absyn.MatchItem x : p.listmatchitem_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(eyg.Absyn.EApply p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      for (eyg.Absyn.Exp x : p.listexp_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(eyg.Absyn.ESelect p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.EVar p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(eyg.Absyn.EInt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(eyg.Absyn.ENegInt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(eyg.Absyn.EString p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(eyg.Absyn.ENamedReference p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* MatchItem */
    public R visit(eyg.Absyn.MatchItem0 p, A arg) {
      R r = leaf(arg);
      r = combine(p.matchpattern_.accept(this, arg), r, arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }

/* MatchPattern */
    public R visit(eyg.Absyn.MPTagged p, A arg) {
      R r = leaf(arg);
      r = combine(p.matchpattern_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.MPRecord p, A arg) {
      R r = leaf(arg);
      for (eyg.Absyn.RecordField x : p.listrecordfield_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(eyg.Absyn.MPId p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* RecordField */
    public R visit(eyg.Absyn.RFKeyVal p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.RFSpread p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }

/* Param */
    public R visit(eyg.Absyn.PId p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* ListItem */
    public R visit(eyg.Absyn.LIExpr p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(eyg.Absyn.LISpread p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }


}
