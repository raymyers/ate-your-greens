// File generated by the BNF Converter (bnfc 2.9.6).

package eyg;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ProgramVisitor<R,A> implements eyg.Absyn.Program.Visitor<R,A>
  {
    public R visit(eyg.Absyn.PExps p, A arg)
    { /* Code for PExps goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ExpVisitor<R,A> implements eyg.Absyn.Exp.Visitor<R,A>
  {
    public R visit(eyg.Absyn.ELet p, A arg)
    { /* Code for ELet goes here */
      p.matchpattern_.accept(new MatchPatternVisitor<R,A>(), arg);
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.EList p, A arg)
    { /* Code for EList goes here */
      for (eyg.Absyn.ListItem x: p.listlistitem_) {
        x.accept(new ListItemVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(eyg.Absyn.ERecord p, A arg)
    { /* Code for ERecord goes here */
      for (eyg.Absyn.RecordField x: p.listrecordfield_) {
        x.accept(new RecordFieldVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(eyg.Absyn.ETagged p, A arg)
    { /* Code for ETagged goes here */
      //p.tag_;
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.ELambda p, A arg)
    { /* Code for ELambda goes here */
      for (eyg.Absyn.Param x: p.listparam_) {
        x.accept(new ParamVisitor<R,A>(), arg);
      }
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.EPerform p, A arg)
    { /* Code for EPerform goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.EHandle p, A arg)
    { /* Code for EHandle goes here */
      //p.tag_;
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.EMatch p, A arg)
    { /* Code for EMatch goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      for (eyg.Absyn.MatchItem x: p.listmatchitem_) {
        x.accept(new MatchItemVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(eyg.Absyn.EApply p, A arg)
    { /* Code for EApply goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      for (eyg.Absyn.Exp x: p.listexp_) {
        x.accept(new ExpVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(eyg.Absyn.ESelect p, A arg)
    { /* Code for ESelect goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      //p.id_;
      return null;
    }
    public R visit(eyg.Absyn.EVar p, A arg)
    { /* Code for EVar goes here */
      //p.id_;
      return null;
    }
    public R visit(eyg.Absyn.EInt p, A arg)
    { /* Code for EInt goes here */
      //p.integer_;
      return null;
    }
    public R visit(eyg.Absyn.ENegInt p, A arg)
    { /* Code for ENegInt goes here */
      //p.integer_;
      return null;
    }
    public R visit(eyg.Absyn.EString p, A arg)
    { /* Code for EString goes here */
      //p.string_;
      return null;
    }
    public R visit(eyg.Absyn.ENamedReference p, A arg)
    { /* Code for ENamedReference goes here */
      //p.namedreference_;
      return null;
    }
  }
  public class MatchItemVisitor<R,A> implements eyg.Absyn.MatchItem.Visitor<R,A>
  {
    public R visit(eyg.Absyn.MatchItem0 p, A arg)
    { /* Code for MatchItem0 goes here */
      p.matchpattern_.accept(new MatchPatternVisitor<R,A>(), arg);
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
  }
  public class MatchPatternVisitor<R,A> implements eyg.Absyn.MatchPattern.Visitor<R,A>
  {
    public R visit(eyg.Absyn.MPTagged p, A arg)
    { /* Code for MPTagged goes here */
      //p.tag_;
      p.matchpattern_.accept(new MatchPatternVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.MPRecord p, A arg)
    { /* Code for MPRecord goes here */
      for (eyg.Absyn.RecordField x: p.listrecordfield_) {
        x.accept(new RecordFieldVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(eyg.Absyn.MPId p, A arg)
    { /* Code for MPId goes here */
      //p.id_;
      return null;
    }
  }
  public class RecordFieldVisitor<R,A> implements eyg.Absyn.RecordField.Visitor<R,A>
  {
    public R visit(eyg.Absyn.RFKeyVal p, A arg)
    { /* Code for RFKeyVal goes here */
      //p.id_;
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.RFSpread p, A arg)
    { /* Code for RFSpread goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ParamVisitor<R,A> implements eyg.Absyn.Param.Visitor<R,A>
  {
    public R visit(eyg.Absyn.PId p, A arg)
    { /* Code for PId goes here */
      //p.id_;
      return null;
    }
  }
  public class ListItemVisitor<R,A> implements eyg.Absyn.ListItem.Visitor<R,A>
  {
    public R visit(eyg.Absyn.LIExpr p, A arg)
    { /* Code for LIExpr goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(eyg.Absyn.LISpread p, A arg)
    { /* Code for LISpread goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
  }
}
